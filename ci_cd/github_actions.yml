name: Echelon CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        required: true
        default: 'false'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 mypy black
        
    - name: Check code formatting with Black
      run: |
        black --check src/
        
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type check with mypy
      run: |
        mypy src/
        
    - name: Test with pytest
      run: |
        pytest --cov=src tests/
        
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event.inputs.deploy == 'true'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./ci_cd/Dockerfile
        push: true
        tags: |
          yourusername/echelon:latest
          yourusername/echelon:${{ github.sha }}
        cache-from: type=registry,ref=yourusername/echelon:latest
        cache-to: type=inline
        
  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy echelon-dev \
          --image yourusername/echelon:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --set-env-vars="ENV=development" \
          --allow-unauthenticated
          
  deploy-prod:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy == 'true'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy echelon-prod \
          --image yourusername/echelon:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --set-env-vars="ENV=production" \
          --allow-unauthenticated 